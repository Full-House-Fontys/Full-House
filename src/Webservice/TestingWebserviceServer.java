
package Webservice;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 */
@WebServiceClient(name = "TestingWebserviceServer", targetNamespace = "http://localhost/CimsService/", wsdlLocation = "http://localhost:19157/TestingWebserviceServer.asmx?wsdl")
public class TestingWebserviceServer
        extends Service {

    private final static URL TESTINGWEBSERVICESERVER_WSDL_LOCATION;
    private final static WebServiceException TESTINGWEBSERVICESERVER_EXCEPTION;
    private final static QName TESTINGWEBSERVICESERVER_QNAME = new QName("http://localhost/CimsService/", "TestingWebserviceServer");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://localhost:19157/TestingWebserviceServer.asmx?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        TESTINGWEBSERVICESERVER_WSDL_LOCATION = url;
        TESTINGWEBSERVICESERVER_EXCEPTION = e;
    }

    public TestingWebserviceServer() {
        super(__getWsdlLocation(), TESTINGWEBSERVICESERVER_QNAME);
    }

    public TestingWebserviceServer(WebServiceFeature... features) {
        super(__getWsdlLocation(), TESTINGWEBSERVICESERVER_QNAME, features);
    }

    public TestingWebserviceServer(URL wsdlLocation) {
        super(wsdlLocation, TESTINGWEBSERVICESERVER_QNAME);
    }

    public TestingWebserviceServer(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, TESTINGWEBSERVICESERVER_QNAME, features);
    }

    public TestingWebserviceServer(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestingWebserviceServer(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    private static URL __getWsdlLocation() {
        if (TESTINGWEBSERVICESERVER_EXCEPTION != null) {
            throw TESTINGWEBSERVICESERVER_EXCEPTION;
        }
        return TESTINGWEBSERVICESERVER_WSDL_LOCATION;
    }

    /**
     * @return returns TestingWebserviceServerSoap
     */
    @WebEndpoint(name = "TestingWebserviceServerSoap")
    public TestingWebserviceServerSoap getTestingWebserviceServerSoap() {
        return super.getPort(new QName("http://localhost/CimsService/", "TestingWebserviceServerSoap"), TestingWebserviceServerSoap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns TestingWebserviceServerSoap
     */
    @WebEndpoint(name = "TestingWebserviceServerSoap")
    public TestingWebserviceServerSoap getTestingWebserviceServerSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://localhost/CimsService/", "TestingWebserviceServerSoap"), TestingWebserviceServerSoap.class, features);
    }

    /**
     * @return returns TestingWebserviceServerSoap
     */
    @WebEndpoint(name = "TestingWebserviceServerSoap12")
    public TestingWebserviceServerSoap getTestingWebserviceServerSoap12() {
        return super.getPort(new QName("http://localhost/CimsService/", "TestingWebserviceServerSoap12"), TestingWebserviceServerSoap.class);
    }

    /**
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return returns TestingWebserviceServerSoap
     */
    @WebEndpoint(name = "TestingWebserviceServerSoap12")
    public TestingWebserviceServerSoap getTestingWebserviceServerSoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://localhost/CimsService/", "TestingWebserviceServerSoap12"), TestingWebserviceServerSoap.class, features);
    }

}
